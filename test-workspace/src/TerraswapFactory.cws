import * from "./common.cws"

contract TerraswapFactory {

  error Unauthorized()
  event cpdateConfig()

  state {
    config: Config
    tmp_pair_info: TmpPairInfo
    pairs[U8]: PairInfo 
    allow_native_tokens[U8]: U8
  }


  fn query_decimals!(account_addr: Address, asset_info: AssetInfo) -> U8 {
    if asset_info is AssetInfo.#Token {
      let { contract_addr } = asset_info
      let token_info = query! CW20(asset_info).#token_info()
      return token_info.decimals
    } else {
      let res = query! $.#native_token_decimals(asset_info.denom)
      return res.decimals
    }
  }

  #instantiate(pair_code_id: U64, token_code_id: U64) {
    $state.config = Config(token_code_id, pair_code_id, $info.sender)
  }

  exec #update_config(owner?: String, token_code_id?: U64, pair_code_id?: U64) {
    if $info.sender != $state.config.owner {
      fail! Unauthorized()
    }

    if owner? {
      $state.config.owner = Address.validate!(owner)
    }

    if token_code_id? {
      $state.token_code_id = token_code_id
    }

    if pair_code_id? {
      $state.pair_code_id = pair_code_id
    }

    emit UpdateConfig()
  }



  exec #create_pair(asset_infos: [AssetInfo; 2]) {
    if asset_infos[0] == asset_infos[1] {
      fail! "same asset"
    }
    
    let asset_1_decimal = query_decimals!($env.contract.address, asset_infos[0])
    let asset_2_decimal = query_decimals!($env.contract.address, asset_infos[1])
    let asset_decimals = [asset_1_decimal, asset_2_decimal]

    let pair_key = String!(asset_infos[0]) + String!(asset_infos[1])
    if pair_key in $state.pairs {
      fail! "Pair already exists"
    }

    $state.tmp_pair_info = TmpPairInfo { pair_key, asset_infos, asset_decimals }
    emit CreatePair(asset_infos[0], asset_infos[1])

    @gas_limit(5000000)
    @reply.on_success(post_instantiate)
    instantiate! #TerraswapPair(asset_infos, $state.config.token_code_id, asset_decimals) {
      code_id: $state.config.pair_code_id,
      admin: $env.contract.address,
      label: "pair"
    }
  }

  exec #add_native_token_decimals(denom: String, decimals: U8) {
    if $info.sender != $state.config.owner {
      fail! Unauthorized()
    }

    let balance = query! Bank.#balance($env.contract.address, denom)

    if balance.amount == 0 {
      fail! "A balance greater than zero is required by the factory for verification"
    }

    $state.allow_native_tokens[denom] = decimals
    emit AddAllowNativeToken(denom, decimals)
  }

  query #config() {
    return $state.config
  }

  query #pair(asset_infos: AssetInfo[2]) {
    let pairs = $state.pairs[asset_infos]
    return pairs;
  }

  query #native_token_decimal(denom: String) {
    let decimals = $state.allow_native_tokens[denom]
    return decimals;
  }

}